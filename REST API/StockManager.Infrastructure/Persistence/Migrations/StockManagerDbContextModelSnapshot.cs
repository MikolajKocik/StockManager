// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockManager.Infrastructure.Persistence.Data;

#nullable disable

namespace StockManager.Infrastructure.Migrations
{
    [DbContext(typeof(StockManagerDbContext))]
    partial class StockManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("StockManager")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "StockManager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "StockManager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "StockManager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "StockManager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "StockManager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.AddressEntity.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId")
                        .IsUnique();

                    b.ToTable("Adresses", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.AuditLogEntity.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.ToTable("AuditLogs", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.BinLocationEntity.BinLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Warehouse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BinLocations", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.CustomerEntity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Customers", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.InventoryItemEntity.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BinLocationId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("QuantityOnHand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityReserved")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Warehouse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BinLocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryItems", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.InvoiceEntity.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique()
                        .HasFilter("[PurchaseOrderId] IS NOT NULL");

                    b.HasIndex("SalesOrderId")
                        .IsUnique()
                        .HasFilter("[SalesOrderId] IS NOT NULL");

                    b.ToTable("Invoices", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.PermissionEntity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ProductEntity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("Products", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.PurchaseOrderEntity.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReturnOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReturnOrderId")
                        .IsUnique()
                        .HasFilter("[ReturnOrderId] IS NOT NULL");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.PurchaseOrderLineEntity.PurchaseOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UoM")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderLines", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ReorderRuleEntity.ReorderRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MaxLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Warehouse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ReorderRules", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ReturnOrderEntity.ReturnOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReturnOrders", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ReturnOrderLineEntity.ReturnOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReturnOrderId")
                        .HasColumnType("int");

                    b.Property<int>("UoM")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReturnOrderId");

                    b.ToTable("ReturnOrderLines", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.RoleEntity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DomainRoles", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.SalesOrderEntity.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReturnOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReturnOrderId")
                        .IsUnique()
                        .HasFilter("[ReturnOrderId] IS NOT NULL");

                    b.ToTable("SalesOrders", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.SalesOrderLineEntity.SalesOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UoM")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderLines", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ShipmentEntity.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("Shipments", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.StockTransactionEntity.StockTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("TargetLocationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.ToTable("StockTransactions", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.SupplierEntity.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.UserEntity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("AspNetUsers", "StockManager");
                });

            modelBuilder.Entity("StockManager.Core.Domain.SharedModels.RolePermissionsEntity.RolePermissions", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", "StockManager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManager.Core.Domain.Models.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.AddressEntity.Address", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.SupplierEntity.Supplier", "Supplier")
                        .WithOne("Address")
                        .HasForeignKey("StockManager.Core.Domain.Models.AddressEntity.Address", "SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Address_Supplier");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.AuditLogEntity.AuditLog", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.UserEntity.User", "ChangedBy")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ChangedBy_User_AuditLog");

                    b.Navigation("ChangedBy");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.CustomerEntity.Customer", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.AddressEntity.Address", "Address")
                        .WithOne("Customer")
                        .HasForeignKey("StockManager.Core.Domain.Models.CustomerEntity.Customer", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Address_Customer");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.InventoryItemEntity.InventoryItem", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.BinLocationEntity.BinLocation", "BinLocation")
                        .WithMany("InventoryItems")
                        .HasForeignKey("BinLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvetoryItem_BinLocation");

                    b.HasOne("StockManager.Core.Domain.Models.ProductEntity.Product", "Product")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Product_InventoryItem");

                    b.Navigation("BinLocation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.InvoiceEntity.Invoice", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.PurchaseOrderEntity.PurchaseOrder", "PurchaseOrder")
                        .WithOne("Invoice")
                        .HasForeignKey("StockManager.Core.Domain.Models.InvoiceEntity.Invoice", "PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_PurchaseOrder_Invoice");

                    b.HasOne("StockManager.Core.Domain.Models.SalesOrderEntity.SalesOrder", "SalesOrder")
                        .WithOne("Invoice")
                        .HasForeignKey("StockManager.Core.Domain.Models.InvoiceEntity.Invoice", "SalesOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_SalesOrder_Invoice");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ProductEntity.Product", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.SupplierEntity.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Product_Supplier");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.PurchaseOrderEntity.PurchaseOrder", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.ReturnOrderEntity.ReturnOrder", "ReturnOrder")
                        .WithOne("PurchaseOrder")
                        .HasForeignKey("StockManager.Core.Domain.Models.PurchaseOrderEntity.PurchaseOrder", "ReturnOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ReturnOrder_PurchaseOrder");

                    b.HasOne("StockManager.Core.Domain.Models.SupplierEntity.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrder_Supplier");

                    b.Navigation("ReturnOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.PurchaseOrderLineEntity.PurchaseOrderLine", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.ProductEntity.Product", "Product")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Product_PurchaseOrderLine");

                    b.HasOne("StockManager.Core.Domain.Models.PurchaseOrderEntity.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrder_PurchaseOrderLine");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ReorderRuleEntity.ReorderRule", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.ProductEntity.Product", "Product")
                        .WithMany("ReorderRules")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Product_ReorderRules");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ReturnOrderLineEntity.ReturnOrderLine", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.ProductEntity.Product", "Product")
                        .WithMany("ReturnOrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Product_ReturnOrderLine");

                    b.HasOne("StockManager.Core.Domain.Models.ReturnOrderEntity.ReturnOrder", "ReturnOrder")
                        .WithMany("ReturnOrderLines")
                        .HasForeignKey("ReturnOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ReturnOrder_ReturnOrderLine");

                    b.Navigation("Product");

                    b.Navigation("ReturnOrder");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.SalesOrderEntity.SalesOrder", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.CustomerEntity.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrder_Customer");

                    b.HasOne("StockManager.Core.Domain.Models.ReturnOrderEntity.ReturnOrder", "ReturnOrder")
                        .WithOne("SalesOrder")
                        .HasForeignKey("StockManager.Core.Domain.Models.SalesOrderEntity.SalesOrder", "ReturnOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ReturnOrder_SalesOrder");

                    b.Navigation("Customer");

                    b.Navigation("ReturnOrder");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.SalesOrderLineEntity.SalesOrderLine", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.ProductEntity.Product", "Product")
                        .WithMany("SalesOrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Product_SalesOrderLine");

                    b.HasOne("StockManager.Core.Domain.Models.SalesOrderEntity.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderLines")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrder_SalesOrderLine");

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ShipmentEntity.Shipment", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.SalesOrderEntity.SalesOrder", "SalesOrder")
                        .WithMany("Shipments")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SalesOrder_Shipment");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.StockTransactionEntity.StockTransaction", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.InventoryItemEntity.InventoryItem", "InventoryItem")
                        .WithMany("StockTransactions")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InventoryItem_StockTransaction");

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("StockManager.Core.Domain.SharedModels.RolePermissionsEntity.RolePermissions", b =>
                {
                    b.HasOne("StockManager.Core.Domain.Models.RoleEntity.Role", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StockManager.Core.Domain.Models.PermissionEntity.Permission", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.AddressEntity.Address", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.BinLocationEntity.BinLocation", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.CustomerEntity.Customer", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.InventoryItemEntity.InventoryItem", b =>
                {
                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ProductEntity.Product", b =>
                {
                    b.Navigation("InventoryItems");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("ReorderRules");

                    b.Navigation("ReturnOrderLines");

                    b.Navigation("SalesOrderLines");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.PurchaseOrderEntity.PurchaseOrder", b =>
                {
                    b.Navigation("Invoice");

                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.ReturnOrderEntity.ReturnOrder", b =>
                {
                    b.Navigation("PurchaseOrder");

                    b.Navigation("ReturnOrderLines");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.SalesOrderEntity.SalesOrder", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();

                    b.Navigation("SalesOrderLines");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.SupplierEntity.Supplier", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("StockManager.Core.Domain.Models.UserEntity.User", b =>
                {
                    b.Navigation("AuditLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
