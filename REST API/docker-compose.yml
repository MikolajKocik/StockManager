services:
  stockmanager:
    container_name: stockmanager
    image: stockmanager:latest
    build:
      context: .
      dockerfile: StockManager/Dockerfile
      target: final
    ports:
      - "5000:8080"
    env_file: .env
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:8080"
      ConnectionStrings__DockerConnection: "${ConnectionStrings__DockerConnection}"
      JWT__Key: "${JWT__KEY}"
      JWT__Issuer: "${JWT__ISSUER}"
      JWT__Audience: "${JWT__AUDIENCE}"
      Redis__Host: "${REDIS__HOST}"
      Redis__Port: "${REDIS__PORT}"
      OTEL_TRACES_EXPORTER: "${OTEL_TRACES_EXPORTER:-none}"
      OTEL_METRICS_EXPORTER: "${OTEL_METRICS_EXPORTER:-none}"
      OTEL_LOGS_EXPORTER: "${OTEL_LOGS_EXPORTER:-none}"
    depends_on:
        redis:
            condition: service_healthy
        sqlserver:
            condition: service_healthy

    volumes:
      - ./logs:/app/logs

  sqlserver:
    container_name: stockmanager-sql
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
     MSSQL_SA_PASSWORD: "${MSSQL_SA_PASSWORD}" 
     ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - sql-data:/var/opt/mssql
    healthcheck:
        test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/127.0.0.1/1433'"]
        interval: 15s
        timeout: 10s
        retries: 5
        start_period: 60s
  
  redis:
    container_name: stockmanager-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5

  tests:
    container_name: stockmanager-tests
    build:
      context: .
      dockerfile: ./StockManager/Dockerfile
      target: test
    depends_on:
     - stockmanager
     - sqlserver

volumes:
    sql-data: {}

  
